{
  // Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  // "Print to console": {
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }

  "inc<>": {
    "prefix": "inc<",
    "body": ["#include <${1:iostream}>"],
  },
  "inc\"\"": {
    "prefix": "inc\"",
    "body": ["#include \"${1:head.h}\""],
  },
  "case": {
    "prefix": "case",
    "body": ["case ${1:/* constant-expression */}:", "    ${0}", "    break;"],
  },
  "lambda": {
    "prefix": "lambda",
    "body": ["[${1:capture}](${2:x}) { ${3:return x;} }"],
    "description": ""
  },
  "enum": {
    "prefix": "enum",
    "body": ["enum ${1:name} { ${0} }"],
    "description": ""
  },
  "enum-class": {
    "prefix": "enum-class",
    "body": ["enum class ${1:name} { ${0} }"],
    "description": ""
  },
  "cout": {
    "prefix": "cout",
    "body": ["std::cout << ${0} << std::endl;"],
    "description": ""
  },
  "using-namespace": {
    "prefix": "using-namespace",
    "body": ["using namespace ${1:std};", "${0}"],
    "description": ""
  },
  "ns": {
    "prefix": "ns", 
    "body": ["namespace ${1:name} {", "${0}", "}"]
  },
  "const_string": {
    "prefix": "cstr",
    "body": ["const std::string& ${0}"],
    "description": ""
  },
  "const_vector": {
    "prefix": "cvec",
    "body": ["const std::vector<${1}>& ${0}"],
    "description": ""
  },
  "ifdef": {
    "prefix": "ifdef",
    "body": ["#ifdef $0"],
    "description": ""
  },
  "define": {
    "prefix": "def",
    "body": ["#define $0"],
    "description": ""
  },
  "once-pragma": {
    "prefix": "once-pragma",
    "body": ["#pragma once$0"],
    "description": ""
  },
  "static_cast": {
    "prefix": "sc",
    "body": ["static_cast<${1:uint32_t}>(${2:expression})$0"]
  },
  "u8": {
    "prefix": "u8",
    "body": ["uint8_t"]
  },
  "u16": {
    "prefix": "u16",
    "body": ["uint16_t"]
  },
  "u32": {
    "prefix": "u32",
    "body": ["uint32_t"]
  },
  "u64": {
    "prefix": "u64",
    "body": ["uint64_t"]
  },
  "i8": {
    "prefix": "i8",
    "body": ["int8_t"]
  },
  "i16": {
    "prefix": "i16",
    "body": ["int16_t"]
  },
  "i32": {
    "prefix": "i32",
    "body": ["int32_t"]
  },
  "i64": {
    "prefix": "i64",
    "body": ["int64_t"]
  },
  "str": {
    "prefix": "str",
    "body": ["std::string"]
  },
  "for": {
    "prefix": "for",
    "body": ["for (${1:size_t} i = 0; i < ${2:length}; ++i) {", "    $0", "}"]
  },
  "size_t": {
    "prefix": "size_t",
    "body": ["size_t"]
  },
  "nullptr": {
    "prefix": "nullptr",
    "body": ["nullptr"]
  },
  "vector": {
    "prefix": "vec",
    "description": "std::vector<type>",
    "body": ["std::vector<${1:type}> $0"]
  },
  "unordered_map": {
    "prefix": "umap",
    "description": "std::unordered_map<key, value>",
    "body": ["std::unordered_map<${1:key}, ${2:value}> $0"]
  },
  "move": {
    "prefix": "move",
    "description": "std::move(expression)",
    "body": ["std::move(${1:expression}) $0"]
  },
  "shared_ptr": {
    "prefix": "sptr",
    "description": "std::shared_ptr<type>",
    "body": ["std::shared_ptr<${1:type}> $0"]
  },
  "unique_ptr": {
    "prefix": "uptr",
    "description": "std::unique_ptr<type>",
    "body": ["std::unique_ptr<${1:type}> $0"]
  },
  "begin_end": {
    "prefix": "begin_end",
    "description": "var.begin(), var.end()",
    "body": ["${1:name}.begin(), ${1:name}.end()$0"]
  },
  "const_ref": {
    "prefix": "const_ref",
    "description": "const_ref",
    "body": ["const ${1:name}&"]
  },
  "template": {
    "prefix": "template",
    "description": "template",
    "body": "template <typename ${1:type}>"
  },
  "test": {
    "prefix": "test",
    "body": "TEST(${1:test_suite_name}, ${2:test_name}) {\n\t$0\n}"
  },
  "eeq": {
    "prefix": "eeq",
    "body": "EXPECT_EQ($1, $2);",
    "description": "EXPECT_EQ"
  },
  "ene": {
    "prefix": "ene",
    "body": "EXPECT_NE($1, $2);",
    "description": "EXPECT_NE"
  },
  "ege": {
    "prefix": "ege",
    "body": "EXPECT_GE($1, $2);",
    "description": "EXPECT_GE"
  },
  "egt": {
    "prefix": "egt",
    "body": "EXPECT_GT($1, $2);",
    "description": "EXPECT_GT"
  },
  "elt": {
    "prefix": "elt",
    "body": "EXPECT_LT($1, $2);",
    "description": "EXPECT_LT"
  },
  "ele": {
    "prefix": "ele",
    "body": "EXPECT_LE($1, $2);",
    "description": "EXPECT_LE"
  },
  "eth": {
    "prefix": "eth",
    "body": "EXPECT_THROW($1, $2);",
    "description": "EXPECT_THROW"
  }
}
